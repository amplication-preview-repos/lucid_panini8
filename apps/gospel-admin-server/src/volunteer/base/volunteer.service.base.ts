/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Volunteer as PrismaVolunteer } from "@prisma/client";

export class VolunteerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VolunteerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.volunteer.count(args);
  }

  async volunteers(
    args: Prisma.VolunteerFindManyArgs
  ): Promise<PrismaVolunteer[]> {
    return this.prisma.volunteer.findMany(args);
  }
  async volunteer(
    args: Prisma.VolunteerFindUniqueArgs
  ): Promise<PrismaVolunteer | null> {
    return this.prisma.volunteer.findUnique(args);
  }
  async createVolunteer(
    args: Prisma.VolunteerCreateArgs
  ): Promise<PrismaVolunteer> {
    return this.prisma.volunteer.create(args);
  }
  async updateVolunteer(
    args: Prisma.VolunteerUpdateArgs
  ): Promise<PrismaVolunteer> {
    return this.prisma.volunteer.update(args);
  }
  async deleteVolunteer(
    args: Prisma.VolunteerDeleteArgs
  ): Promise<PrismaVolunteer> {
    return this.prisma.volunteer.delete(args);
  }
}
